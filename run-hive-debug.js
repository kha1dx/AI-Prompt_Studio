#!/usr/bin/env node

/**
 * 🚀 HIVE MIND DEBUG EXECUTION
 * Execute comprehensive debugging operation
 */

const MasterCoordinator = require('./agents/master-coordinator');
const fs = require('fs');
const path = require('path');

async function executeHiveMindDebug() {
    console.log('🏆 INITIATING HIVE MIND DEBUG OPERATION');
    console.log('========================================');
    console.log('🎯 Mission: Identify and fix chat functionality issues');
    console.log('👥 Elite Squad: 4 specialist debugging agents');
    console.log('⚡ Execution: Parallel analysis with consolidated results');
    console.log('');

    try {
        // Create results directory
        const resultsDir = 'debug-results';
        if (!fs.existsSync(resultsDir)) {
            fs.mkdirSync(resultsDir);
        }

        // Execute the hive mind operation
        const coordinator = new MasterCoordinator();
        const masterReport = await coordinator.executeHiveMindDebug();

        // Save detailed results
        const reportFile = path.join(resultsDir, `hive-debug-${Date.now()}.json`);
        fs.writeFileSync(reportFile, JSON.stringify(masterReport, null, 2));

        // Generate human-readable summary
        const summaryFile = path.join(resultsDir, 'debug-summary.md');
        const summary = generateSummaryMarkdown(masterReport);
        fs.writeFileSync(summaryFile, summary);

        console.log('\n🎉 HIVE MIND DEBUG OPERATION COMPLETE!');
        console.log('=====================================');
        console.log(`📄 Detailed report: ${reportFile}`);
        console.log(`📝 Summary report: ${summaryFile}`);
        console.log('');

        // Display immediate action items
        console.log('🚨 IMMEDIATE ACTION REQUIRED:');
        masterReport.actionPlan.forEach((action, index) => {
            console.log(`   ${action}`);
        });

        console.log('');
        console.log('🏆 Your elite debugging team has identified the issues!');
        console.log('   Execute the action plan above to resolve the chat functionality.');

        return masterReport;

    } catch (error) {
        console.error('❌ CRITICAL FAILURE in hive mind operation:', error);
        process.exit(1);
    }
}

function generateSummaryMarkdown(report) {
    const timestamp = new Date().toISOString();
    
    return `# 🏆 Hive Mind Debug Operation Results

**Operation Date:** ${timestamp}
**System Status:** ${report.status}
**Root Cause:** ${report.rootCause.type}

## 🎯 Root Cause Analysis

**Issue Type:** ${report.rootCause.type}
**Description:** ${report.rootCause.description}
**Priority:** ${report.rootCause.priority}
**Impact:** ${report.rootCause.impact}

## 📋 Action Plan

${report.actionPlan.map((action, index) => `${action}`).join('\n')}

## 🔍 Agent Reports Summary

### 🏗️ Backend Architect
- **Status:** ${report.agentReports.BackendArchitect?.status || 'Not Available'}
- **Critical Issues:** ${report.agentReports.BackendArchitect?.criticalIssues?.length || 0}

### ⚛️ Frontend Developer  
- **Status:** ${report.agentReports.FrontendDeveloper?.status || 'Not Available'}
- **Critical Issues:** ${report.agentReports.FrontendDeveloper?.criticalIssues?.length || 0}

### 🧪 API Tester
- **Status:** ${report.agentReports.APITester?.status || 'Not Available'}
- **Critical Issues:** ${report.agentReports.APITester?.criticalIssues?.length || 0}

### 🌐 System Architect
- **Status:** ${report.agentReports.SystemArchitect?.status || 'Not Available'}
- **Critical Issues:** ${report.agentReports.SystemArchitect?.criticalIssues?.length || 0}

## 📊 Overall Statistics

- **Total Agents Deployed:** ${report.summary.totalAgents}
- **Critical Issues Found:** ${report.summary.criticalIssues}
- **Recommendations Generated:** ${report.summary.recommendations}
- **System Health:** ${report.summary.systemHealth}

## 🎯 Next Steps

1. Execute the action plan in order
2. Test each fix before moving to the next
3. Run the debug operation again after fixes
4. Monitor system for additional issues

---
*Generated by the Elite Debugging Squad - Your problems don't stand a chance!* 🏆
`;
}

// Execute if run directly
if (require.main === module) {
    executeHiveMindDebug();
}

module.exports = { executeHiveMindDebug };