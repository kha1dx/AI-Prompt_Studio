name: Authentication Testing Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/components/auth/**'
      - 'src/lib/auth/**'
      - 'src/hooks/useAuth.ts'
      - 'app/auth/**'
      - 'tests/**'
      - 'package*.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/components/auth/**'
      - 'src/lib/auth/**'
      - 'src/hooks/useAuth.ts'
      - 'app/auth/**'
      - 'tests/**'
      - 'package*.json'
  schedule:
    # Run full test suite nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - unit
          - integration
          - e2e
          - security
          - performance

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  # Pre-flight checks
  preflight:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_run_unit: ${{ steps.changes.outputs.unit }}
      should_run_integration: ${{ steps.changes.outputs.integration }}
      should_run_e2e: ${{ steps.changes.outputs.e2e }}
      should_run_security: ${{ steps.changes.outputs.security }}
      should_run_performance: ${{ steps.changes.outputs.performance }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            unit:
              - 'src/**/*.ts'
              - 'src/**/*.tsx'
              - 'tests/unit/**'
              - 'tests/jest.*'
              - 'package*.json'
            integration:
              - 'src/**/*.ts'
              - 'src/**/*.tsx'
              - 'tests/integration/**'
              - 'tests/mocks/**'
              - 'package*.json'
            e2e:
              - 'src/**'
              - 'app/**'
              - 'tests/e2e/**'
              - 'tests/playwright.*'
              - 'package*.json'
            security:
              - 'src/lib/auth/**'
              - 'src/components/auth/**'
              - 'tests/security/**'
              - 'package*.json'
            performance:
              - 'src/**'
              - 'tests/performance/**'
              - 'package*.json'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Type check
        run: npm run typecheck

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=high

  # Unit Tests
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_run_unit == 'true' || github.event_name == 'schedule' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'unit'
    timeout-minutes: 15
    strategy:
      matrix:
        node-version: ['16', '18', '20']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --coverage --maxWorkers=2
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '18'
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-coverage

      - name: Store test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            test-results/
          retention-days: 7

  # Integration Tests
  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_run_integration == 'true' || github.event_name == 'schedule' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration'
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:migrate:test
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/auth_test
          REDIS_URL: redis://localhost:6379

      - name: Run integration tests
        run: npm run test:integration -- --maxWorkers=2
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/auth_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          NEXTAUTH_SECRET: test-nextauth-secret

      - name: Store integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: test-results/
          retention-days: 7

  # End-to-End Tests
  e2e_tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_run_e2e == 'true' || github.event_name == 'schedule' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e'
    timeout-minutes: 30
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_test_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Setup test database
        run: |
          npm run db:migrate:test
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/auth_test_e2e

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/auth_test_e2e

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/auth_test_e2e
          JWT_SECRET: test-jwt-secret
          NEXTAUTH_SECRET: test-nextauth-secret

      - name: Wait for application to be ready
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # Security Tests
  security_tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_run_security == 'true' || github.event_name == 'schedule' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'security'
    timeout-minutes: 25
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security tests
        run: npm run test:security
        env:
          NODE_ENV: test

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.4.0
        if: github.event_name == 'schedule'
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        if: github.event_name != 'pull_request'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload security test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: test-results/
          retention-days: 30

  # Performance Tests
  performance_tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: preflight
    if: needs.preflight.outputs.should_run_performance == 'true' || github.event_name == 'schedule' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'performance'
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_test_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          npm run db:migrate:test
          npm run db:seed:test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/auth_test_perf

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start application
        run: npm start &
        env:
          NODE_ENV: production
          PORT: 3000
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/auth_test_perf

      - name: Wait for application to be ready
        run: npx wait-on http://localhost:3000 --timeout 60000

      - name: Run performance tests
        run: npm run test:performance
        env:
          PERFORMANCE_BASE_URL: http://localhost:3000

      - name: Run Lighthouse performance audit
        uses: treosh/lighthouse-ci-action@v9
        if: github.event_name == 'schedule'
        with:
          urls: |
            http://localhost:3000/login
            http://localhost:3000/register
          configPath: './lighthouse.json'
          uploadArtifacts: true

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            test-results/
            .lighthouseci/
          retention-days: 7

  # Cross-browser compatibility
  cross_browser:
    name: Cross-browser Tests
    runs-on: ubuntu-latest
    needs: [unit_tests, integration_tests]
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'all'
    timeout-minutes: 45
    strategy:
      matrix:
        browser: 
          - chromium
          - firefox
          - webkit
          - 'Mobile Chrome'
          - 'Mobile Safari'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: npm start &
        env:
          PORT: 3000

      - name: Wait for application
        run: npx wait-on http://localhost:3000

      - name: Run cross-browser tests
        run: npx playwright test --project="${{ matrix.browser }}"

      - name: Upload results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cross-browser-${{ matrix.browser }}
          path: test-results/
          retention-days: 7

  # Accessibility Tests
  accessibility_tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.test_type == 'all'
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and start application
        run: |
          npm run build
          npm start &
        env:
          PORT: 3000

      - name: Wait for application
        run: npx wait-on http://localhost:3000

      - name: Run accessibility tests
        run: npx playwright test --project=accessibility

      - name: Upload accessibility results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: accessibility-test-results
          path: test-results/
          retention-days: 7

  # Test Results Summary
  test_summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit_tests, integration_tests, e2e_tests, security_tests, performance_tests]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate test summary
        run: |
          echo "# Authentication Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.unit_tests.result }}" == "success" ]; then
            echo "✅ Unit Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Unit Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.integration_tests.result }}" == "success" ]; then
            echo "✅ Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.e2e_tests.result }}" == "success" ]; then
            echo "✅ E2E Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ E2E Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.security_tests.result }}" == "success" ]; then
            echo "✅ Security Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Security Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.performance_tests.result }}" == "success" ]; then
            echo "✅ Performance Tests: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Performance Tests: FAILED" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#engineering'
          text: 'Authentication tests failed on ${{ github.ref }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}